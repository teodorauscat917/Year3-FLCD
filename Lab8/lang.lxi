%{
#include <stdio.h>
#include <string.h>
int lines = 0;
%}

%option noyywrap
%option caseless

STR_CONST		\'[0-9a-zA-Z]+\'
NUMBER_CONST		[+-]?[1-9][0-9]*|0
CONST		{STR_CONST}|{NUMBER_CONST}
ID 		[a-zA-Z][a-zA-Z0-9]*


%%

array {printf("Reserved word: %s\n", yytext);}
char {printf( "Reserved word: %s\n", yytext);}
end {printf( "Reserved word: %s\n", yytext);}
const {printf( "Reserved word: %s\n", yytext);}
do {printf( "Reserved word: %s\n", yytext);}
else {printf( "Reserved word: %s\n", yytext);}
if {printf( "Reserved word: %s\n", yytext);}
integer {printf( "Reserved word: %s\n", yytext);}
of {printf( "Reserved word: %s\n", yytext);}
program {printf( "Reserved word: %s\n", yytext);}
read {printf( "Reserved word: %s\n", yytext);}
then {printf( "Reserved word: %s\n", yytext);}
var {printf( "Reserved word: %s\n", yytext);}
while {printf( "Reserved word: %s\n", yytext);}
write {printf( "Reserved word: %s\n", yytext);}
begin {printf( "Reserved word: %s\n", yytext);}



"{"    {printf( "Separator: %s\n", yytext );}
"}"    {printf( "Separator: %s\n", yytext );}
"("    {printf( "Separator: %s\n", yytext );}
")"    {printf( "Separator: %s\n", yytext );}
"["    {printf( "Separator: %s\n", yytext );}
"]"    {printf( "Separator: %s\n", yytext );}
";"    {printf( "Separator: %s\n", yytext );}
": "    {printf( "Separator: %s\n", yytext );}
","    {printf( "Separator: %s\n", yytext );}
"'"    {printf( "Separator: %s\n", yytext );}
"+"    {printf( "Operator: %s\n", yytext );}
"-"    {printf( "Operator: %s\n", yytext );}
"*"    {printf( "Operator: %s\n", yytext );}
"/"    {printf( "Operator: %s\n", yytext );}
":="    {printf( "Separator: %s\n", yytext );}
"%"    {printf( "Operator: %s\n", yytext );}
"<"    {printf( "Operator: %s\n", yytext );}
">"    {printf( "Operator: %s\n", yytext );}
"<="    {printf( "Operator: %s\n", yytext );}
">="    {printf( "Operator: %s\n", yytext );}
"!="    {printf( "Operator: %s\n", yytext );}
"="    {printf( "Operator: %s\n", yytext );}


{ID}	{printf( "Identifier: %s\n", yytext);}

{CONST}	{printf( "Constant: %s\n", yytext );}


[ \t]+  	{}
[\n]+ {lines++;}

[+-]?0[0-9]+ {printf("Illegal constant at line %d\n", lines); return -1;}

[0-9~@#$%^][a-zA-Z0-9]{1,7}	{printf("Illegal identifier at line %d\n", lines); return -1;}

.	{printf("Illegal symbol %s at line %d\n", yytext, lines); return -1;}
[\'][a-zA-Z0-9_]+|[a-zA-Z0-9_]+[\']		{printf("Illegal string constant at line %d\n", lines); return -1;}
%%
int main(int argc, char **argv )
{
    if ( argc > 1 )
        yyin = fopen(argv[1], "r");
    else
        yyin = stdin;
    yylex();

}